	// Computation of SA quantities
	{
		f1 dyub,dxvb;
		f1 dxnutb,dynutb;
		{
			f2 tempu1;
			f1 tempu2;
			tempu1 = ub;    tempu2[] = DDY*tempu1[]; dyub[]   = Mu^-1*tempu2[];
			tempu1 = vb;    tempu2[] = DDX*tempu1[]; dxvb[]   = Mu^-1*tempu2[];
			tempu1 = nutb;  tempu2[] = DDX*tempu1[]; dxnutb[] = Mu^-1*tempu2[];
			tempu1 = nutb;  tempu2[] = DDY*tempu1[]; dynutb[] = Mu^-1*tempu2[];
		}
		
		{
			// Spallart Almaras
					// For Spallart Almaras
			f1 xi,xi2,xi3;
			f0 r,rp,drdnu,drduv;
		        f1 Stilde;
			f1 S,dSduv,dStildeduv,S0,Sbar,dSbardnu,dStildednu;
			f1 nuT,fv1,dfv1dnu,fv2,fw,dfwdg,dfwdnu,dfwduv,g,dgdr,gn,dgndxi;
			f1 dsdnuu,dsduvu;
			f1 dNormeTdu,dNormeTdv,dReTdu,dReTdv,dchiT,NormeT,ReT,chiT;
			
			xi = nutb/nu;
			xi2 = xi*(nutb/nu);
			xi3 = xi2*(nutb/nu);
			csiSA = (xi>=0.)*nu*(1.+xi) + (xi<0.)*nu*(1.+xi+0.5*xi2);
			fv1 = (xi3)/(xi3 + cv1^3);
			fv2 = 1. - xi/( 1. + xi*fv1 );
			nuT = nutb*fv1;
			csiNS = nu + (nuT>=0.)*nuT;
			S = sqrt((dyub - dxvb)^2 + M^2 ) - M;
			S0 = S;
			Sbar = nutb*fv2/(kk*kk*d2);
			Stilde = Sbar + S0;
			rp = nutb/(Stilde*kk*kk*d2);
			r = (rp<0. || rp>10.)*(10.) + (rp>=0. && rp<=10.)*rp;
			g = r + cw2*(r^6-r);
			fw = g*(( 1. + cw3^6 )/( g^6 + cw3^6 ) )^(1./6.);
			gn = 1. - 1000.*xi2/( 1. + xi2 );
			s =      (xi>=0.)*( (1.+ffx)*cb1*Stilde*nutb - cw1*fw*(nutb^2)/d2 + (cb2/sigma)*(dxnutb^2 + dynutb^2) )
			  + (xi< 0.)*( (1.+ffx)*cb1*S*nutb*gn   + cw1*(nutb^2)/d2    + (cb2/sigma)*(dxnutb^2 + dynutb^2) );

			dfv1dnu = (3./nu)*(cv1^3)*(xi2)/((xi3+cv1^3)^2);
			dcsiSAdnut = (xi>=0.)*1. + (xi<0.)*(1.+xi);
			dcsiNSdnut = (nuT>=0.)*(fv1 + nutb*dfv1dnu);		
			dSduv = (dyub - dxvb)/sqrt( (dyub - dxvb)^2 + M^2 );
			dSbardnu = (1./(kk*kk*d2))*( fv2 + xi*(nu*xi2*dfv1dnu - 1.)/((1.+xi*fv1)^2) );
			dStildednu = dSbardnu;
			dStildeduv = dSduv;
			drdnu = (rp>=0. && rp<=10.)*r*(1./nutb - dStildednu/Stilde);
			drduv = (rp>=0. && rp<=10.)*( - r*dStildeduv/Stilde );
			dgdr = 1. + cw2*(6.*r^5-1.);
			dfwdg = (((1.+cw3^6)/(g^6+cw3^6))^(1./6.))*( 1. - (g^6)/(g^6+cw3^6) );
			dfwdnu = dfwdg*dgdr*drdnu;
			dfwduv = dfwdg*dgdr*drduv;
			dgndxi = - 2000.*xi/( ( 1. + xi2 )^2 );
			dsdnuu = (xi>=0.)*( (1.+ffx)*cb1*(dStildednu*nutb + Stilde) - cw1*( dfwdg*dgdr*drdnu*nutb*nutb/d2 + 2.*fw*nutb/d2 ) )
			  + (xi<0.)*( (1.+ffx)*cb1*S*(gn + xi*dgndxi) + 2.*cw1*nutb/d2 );
			dsdnu = dsdnuu;
			dsduvu = (xi>=0.)*( (1.+ffx)*cb1*nutb*dStildeduv - cw1*nutb*nutb*dfwdg*dgdr*drduv/d2 ) + (xi<0.)*(1.+ffx)*cb1*nutb*gn*dSduv;
			dsduv = dsduvu;
			dsddxnu = ( 2.*cb2*dxnutb/sigma );
			dsddynu = ( 2.*cb2*dynutb/sigma );

			// Stabilization
			
			// f0 hT  = sqrt(2.)*area/hTriangle;
			f0 hT  = hTriangle;
			
			real MSUPG = 0.1;
			NormeT     = sqrt( ub*ub+vb*vb + MSUPG^2);
			ReT        = 0.5*NormeT*hT/nu;
			chiT       = (ReT<=3)*(ReT/3.) + (ReT>3)*(1.);
			TauSUPG    = chiT*hT/(2.*NormeT);
			TauGradDiv = (hT/order)^2/( dimensionTau*c1*TauSUPG );
			dNormeTdu  = ub/sqrt( ub*ub+vb*vb + MSUPG^2);
			dNormeTdv  = vb/sqrt( ub*ub+vb*vb + MSUPG^2);
			dReTdu     = 0.5*hT*dNormeTdu/nu;
			dReTdv     = 0.5*hT*dNormeTdv/nu;
			dchiT      = (1./3.)*(ReT<3.);
			dTauSUPGdu = (hT/2.)*( - (chiT/(NormeT^2))*dNormeTdu + dchiT*dReTdu/NormeT );
			dTauSUPGdv = (hT/2.)*( - (chiT/(NormeT^2))*dNormeTdv + dchiT*dReTdv/NormeT );
			dTauGradDivdu = -(hT/order)^2/( dimensionTau*c1*TauSUPG^2 )*dTauSUPGdu;
			dTauGradDivdv = -(hT/order)^2/( dimensionTau*c1*TauSUPG^2 )*dTauSUPGdv;
		 }
	}
